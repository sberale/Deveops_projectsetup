##########################################
DevOps Project Setup with CI CD Pipeline
##########################################

1) Git Hub 
2) Maven
3) SonarQube
4) Nexus Repo 
5) Tomcat
6) Jenkins


##################
Pipeline creation
##################

=> Create CI CD Pipeline with below stages

========================
1) Create github stage 
========================

Git Repo : https://github.com/ashokitschool/maven-web-app.git

stage('clone repo') {
           
        git credentialsId: 'GIT-Credentials', url: 'https://github.com/ashokitschool/maven-web-app.git'
        
}

=========================================================
2) Create Maven Build Stage (Add maven in global tools)
=========================================================

stage ('Maven Build'){
        def mavenHome = tool name: "Maven-3.9.4", type: "maven"
        def mavenCMD = "${mavenHome}/bin/mvn"
        sh "${mavenCMD} clean package"
}

============================
3) Create SonarQube stage
===========================

-> Start Sonar Server 

-> Login into Sonar Server & Generate Sonar Token 

Ex: 4b10dc9d10194f31f15d0233bdf8acc619c5ec96

-> Add Sonar Token in 'Jenkins Credentials' as Secret Text

			-> Manager Jenkins 
			-> Credentials 
			-> Add Credentials 
			-> Select Secret text
			-> Enter Sonar Token as secret text 

-> Manage Jenkins -> Plugins -> Available -> Sonar Qube Scanner Plugin -> Install it

-> Manage Jenkins -> Configure System -> Sonar Qube Servers -> Add Sonar Qube Server 
		
				- Name : Sonar-Server-7.8
				- Server URL : http://52.66.247.11:9000/   (Give your sonar server url here)
				- Add Sonar Server Token			

-> Once above steps are completed, then add below stage in the pipeline

stage('SonarQube analysis') {
			withSonarQubeEnv('Sonar-Server-7.8') {
			def mavenHome = tool name: "Maven-3.8.6", type: "maven"
			def mavenCMD = "${mavenHome}/bin/mvn"
			sh "${mavenCMD} sonar:sonar"
    	}
}

=======================
4) Create Nexus Stage
======================
-> Run nexus VM and create nexus repository

-> Create Nexus Repository 

-> Install Nexus Repository Plugin using Manage Plugins   ( Plugin Name : Nexus Artifact Uploader)

-> Generate Nexus Pipeline Syntax

stage ('Nexus Upload'){
nexusArtifactUploader artifacts: [[artifactId: '01-Maven-Web-App', classifier: '', file: 'target/01-maven-web-app.war', type: 'war']], credentialsId: 'Nexus-Credentials', groupId: 'in.ashokit', nexusUrl: '13.127.185.241:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'ashokit-snapshot-repository', version: '1.0-SNAPSHOT'
}

=========================
5) Create Deploy Stage
=========================

-> Start Tomcat Server

-> Install SSH Agent plugin using Manage Plugins

-> Generate SSH Agent and configure stage

-> Add Tomcat Server as 'Uname with Secret Text'

stage ('Deploy'){
    sshagent(['Tomcat-Server-Agent']) {
			sh 'scp -o StrictHostKeyChecking=no target/01-maven-web-app.war ec2-user@43.204.115.248:/home/ec2-user/apache-tomcat-9.0.80/webapps'
	}
}


################
Final Pipeline
################

node {
   
   stage('Git Clone'){
       git credentialsId: 'GIT-CREDENTIALS', url: 'https://github.com/ashokitschool/maven-web-app.git'
   }
   
   stage('Maven Build'){
        def mavenHome = tool name: "Maven-3.9.4", type: "maven"
        def mavenPath = "${mavenHome}/bin/mvn"
        sh "${mavenPath} clean package"
   }
   
   stage('Code Review') {
	    withSonarQubeEnv('Sonar-Server-7.8') {
	        def mavenHome = tool name: "Maven-3.9.4", type: "maven"
	        def mavenCMD = "${mavenHome}/bin/mvn"
	        sh "${mavenCMD} sonar:sonar"
        }
    }
	
	stage('Quality Gate') {
		steps {
			timeout(time: 1, unit: 'HOURS') {
				def qg = waitForQualityGate()
				if (qg.status != 'OK') {
					error "Quality Gate failed: ${qg.status}"
				}
			}
		}
    }
        
    
    stage('Nexus Upload'){
       nexusArtifactUploader artifacts: [[artifactId: '01-Maven-Web-App', classifier: '', file: 'target/01-maven-web-app.war', type: 'war']], credentialsId: 'Nexus-Credentials', groupId: 'in.ashokit', nexusUrl: '3.108.217.159:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'ashokit-snapshot-repo', version: '1.0-SNAPSHOT'
    }
    
    stage ('Deploy'){
       sshagent(['Tomcat-Server-Agent']) {
		sh 'scp -o StrictHostKeyChecking=no target/01-maven-web-app.war ec2-user@43.204.115.248:/home/ec2-user/apache-tomcat-9.0.80/webapps'
	   }
    }
    
   
}

===========================
Pipeline Conditions
===========================

pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                // Your build steps here
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('YourSonarQubeServer') {
                    sh 'mvn clean package sonar:sonar'
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    def qg = waitForQualityGate()
                    if (qg.status != 'OK') {
                        error "Quality Gate failed: ${qg.status}"
                    }
                }
            }
        }
        
        stage('Deploy') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                // Your deployment steps here
            }
        }
    }
}
